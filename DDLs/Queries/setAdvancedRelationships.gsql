CREATE QUERY setAdvancedRelationships(BOOL print_stats = FALSE)  {
/**
 Copyright (c) 2024, Custom Discoveries Inc.
 All rights reserved.
 **/

/**
 Run this setup query first

 Set a more detailed Parental relationship between parent and child.
 These relationships include
   hasUncle, hasAunt, hasGrandFather, hasGrandMother
**/
  
  Start = {Person.*};

  SetAccum<EDGE> @@Connections;
#
#  Find Uncle / Nephew
#
  R1 = Select child FROM Start:child - (hasFather>:e1)- :parent - (hasBrother>:e2)-:b WHERE (child.gender == "M" AND b.gender =="M")
  ACCUM INSERT INTO hasUncle VALUES (child.id, b.id), INSERT INTO hasNephew VALUES (b.id, child.id);
#
#  Find Aunt / Niece
#
  R2 = Select child FROM Start:child - (hasMother>:e1)- :parent - (hasSister>:e2)-:s WHERE (child.gender == "F" AND parent.gender =="F")
  ACCUM INSERT INTO hasAunt VALUES (child.id, s.id), INSERT INTO hasNiece VALUES (s.id, child.id);
  R1 = R1 UNION R2;
#
# Find Uncle / Niece
#
  R3 = Select child FROM Start:child - (hasFather>:e1)- :parent -(hasBrother>:e2)-:b WHERE (child.gender == "F" AND parent.gender =="M")
  ACCUM INSERT INTO hasUncle VALUES (child.id, b.id), INSERT INTO hasNiece VALUES (b.id, child.id);
  R1 = R1 UNION R3;
#
# Find Aunt / Nephew
#
  R4 = Select child FROM Start:child - (hasMother>:e1)- :parent - (hasSister>:e2)-:s WHERE (child.gender == "M" AND parent.gender =="F")
  ACCUM INSERT INTO hasAunt VALUES (child.id, s.id), INSERT INTO hasNephew VALUES (s.id, child.id);
  R1 = R1 UNION R4;
#
#  Find GrandFather of GrandSon
#
  R5 = Select child FROM Start:child - (hasFather>:e)-:parent -(hasFather>:gfc) - :gf WHERE (child.gender == "M" AND gf.gender =="M" and child.id != parent.id and parent.id != gf.id)
  ACCUM INSERT INTO hasGrandFather VALUES (child.id, gf.id), INSERT INTO hasGrandSon VALUES (gf.id, child.id);
  R1 = R1 UNION R5;
#
#  Find GrandMother of GrandDaughter
#
  R6 = Select child FROM Start:child - (hasMother>:e)-:parent -(hasMother>:ec) - :gm WHERE (child.gender == "F" AND gm.gender =="F" and child.id != parent.id and parent.id != gm.id)
  ACCUM INSERT INTO hasGrandMother VALUES (child.id, gm.id), INSERT INTO hasGrandDaughter VALUES (gm.id, child.id);
  R1 = R1 UNION R6;
#
#  Find GrandMother of GrandSon
#
  R7 = Select child FROM Start:child - (hasMother>:e)-:parent -(hasMother>:ec) - :gm WHERE (child.gender == "M" AND gm.gender =="F" and child.id != parent.id and parent.id != gm.id)
  ACCUM INSERT INTO hasGrandMother VALUES (child.id, gm.id), INSERT INTO hasGrandSon VALUES (gm.id, child.id);
  R1 = R1 UNION R7;
#
#  Find GrandFather of GrandDaughter
#
  R8 = Select child FROM Start:child - (hasFather>:e)-:parent -(hasFather>:ec) - :gf WHERE (child.gender == "F" AND gf.gender =="M" and child.id != parent.id and parent.id != gf.id)
  ACCUM INSERT INTO hasGrandFather VALUES (child.id, gf.id), INSERT INTO hasGrandDaughter VALUES (gf.id, child.id);
  R1 = R1 UNION R8;

  setRoles_subquery(print_stats);

IF (print_stats) THEN
  PRINT R1.size();
  PRINT R1[R1.name, R1.gender, R1.age];
END;

}