CREATE QUERY setRelationships(BOOL print_stats = FALSE) {
/**
 Copyright (c) 2024, Custom Discoveries Inc.
 All rights reserved.
 **/

/**
 Run this setup query first

 Set a more detailed Parental relationship between parent and child.
 These relationships include
   hasFather, hasMother, hasSon, hasDaughter, hasSister, hasBrother
**/
  
  Start = {Person.*};

  SetAccum<EDGE> @@Connections;
#
#  Find Son of Father
#
  R1 = Select child FROM Start:child-(hasParent>:e)-:parent WHERE (child.gender == "M" AND parent.gender =="M")
  ACCUM INSERT INTO hasSon VALUES (parent.id, child.id), INSERT INTO hasFather VALUES (child.id, parent.id), @@Connections += e;
#
#  Find Daugher of Father
#
  R2 = Select child FROM Start:child-(hasParent>:e)-:parent WHERE (child.gender == "F" AND parent.gender =="M")
  ACCUM INSERT INTO hasDaughter VALUES (parent.id, child.id), INSERT INTO hasFather VALUES (child.id, parent.id), @@Connections += e;
  R1 = R1 UNION R2;
#
# Find Son of Mother
#
  R3 = Select child FROM Start:child-(hasParent>:e)-:parent WHERE (child.gender == "M" AND parent.gender =="F")
  ACCUM INSERT INTO hasSon VALUES (parent.id, child.id), INSERT INTO hasMother VALUES (child.id, parent.id), @@Connections += e;
  R1 = R1 UNION R3;
#
#  Find Daughter of Mother
#
  R4 = Select child FROM Start:child-(hasParent>:e)-:parent WHERE (child.gender == "F" AND parent.gender =="F")
  ACCUM INSERT INTO hasDaughter VALUES (parent.id, child.id), INSERT INTO hasMother VALUES (child.id, parent.id), @@Connections += e;
  R1 = R1 UNION R4;
#
#  Find all Brothers of a parent
#
  R5 = Select child1 FROM Start:child1-(hasParent>:e)-:parent -(hasChild>:ec) - :child2 WHERE (child1.gender == "M" AND child2.gender =="M" and child1.id != child2.id)
  ACCUM INSERT INTO hasBrother VALUES (child1.id, child2.id), INSERT INTO hasBrother VALUES (child2.id, child1.id);
  R1 = R1 UNION R5;
#
#  Find all Sisters of a parent
#
  R6 = Select child1 FROM Start:child1-(hasParent>:e)-:parent -(hasChild>:ec) - :child2 WHERE (child1.gender == "F" AND child2.gender =="F" and child1.id != child2.id)
  ACCUM INSERT INTO hasSister VALUES (child1.id, child2.id), INSERT INTO hasSister VALUES (child2.id, child1.id);
  R1 = R1 UNION R6;
#
#  Find all Brothers of a Sister
#
  R7 = Select child1 FROM Start:child1-(hasParent>:e)-:parent -(hasChild>:ec) - :child2 WHERE (child1.gender == "M" AND child2.gender =="F" and child1.id != child2.id)
  ACCUM INSERT INTO hasSister VALUES (child1.id, child2.id), INSERT INTO hasBrother VALUES (child2.id, child1.id);
  R1 = R1 UNION R7;
#
#  Find all Sisters of a Brother
#
  R8 = Select child1 FROM Start:child1-(hasParent>:e)-:parent -(hasChild>:ec) - :child2 WHERE (child1.gender == "F" AND child2.gender =="M" and child1.id != child2.id)
  ACCUM INSERT INTO hasBrother VALUES (child1.id, child2.id), INSERT INTO hasSister VALUES (child2.id, child1.id);
  R1 = R1 UNION R8;

  setRoles_subquery(print_stats);

IF (print_stats) THEN
  PRINT R1.size();
  PRINT @@Connections;
  PRINT R1[R1.name, R1.gender, R1.age];
END;

}